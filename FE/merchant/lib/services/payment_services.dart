// lib/services/payment_services.dart

import 'dart:convert'; // Th√™m ƒë·ªÉ in JSON ƒë·∫πp
import 'package:dio/dio.dart'; // Th√™m ƒë·ªÉ b·∫Øt l·ªói Dio
import 'package:merchant/config/dio_customize.dart';

class PaymentServices {
  /// Ph∆∞∆°ng th·ª©c t·∫°o m·ªôt giao d·ªãch thanh to√°n m·ªõi.
  static Future<ApiResponse> createPaymentApi({
    required int premiumPackageId,
  }) async {
    const String endpoint = '/api/Payment/create';
    print('üöÄ [API REQUEST] Calling $endpoint...');

    try {
      final response = await skipNotiDioInstance.post(
        endpoint,
        data: {'premiumPackageId': premiumPackageId},
      );
      // LOG KHI TH√ÄNH C√îNG
      _logSuccess('createPaymentApi', response.data);
      return ApiResponse.fromJson(response.data);
    } catch (e) {
      // LOG KHI C√ì L·ªñI v√† N√âM L·ªñI RA L·∫†I
      _logError('createPaymentApi', e);
      rethrow; // N√©m l·ªói ra l·∫°i ƒë·ªÉ UI c√≥ th·ªÉ b·∫Øt v√† x·ª≠ l√Ω
    }
  }

  /// Ph∆∞∆°ng th·ª©c ki·ªÉm tra tr·∫°ng th√°i c·ªßa m·ªôt giao d·ªãch.
  static Future<ApiResponse> checkPaymentStatusApi({
    required String paymentId,
  }) async {
    const String endpoint = '/api/Payment/checkStatus';
    print('üöÄ [API REQUEST] Calling $endpoint with paymentId: $paymentId');
    
    try {
      final response = await skipAllNotiDioInstance.get(
        endpoint,
        queryParameters: {'paymentId': paymentId},
      );
      // LOG KHI TH√ÄNH C√îNG
      _logSuccess('checkPaymentStatusApi', response.data);
      return ApiResponse.fromJson(response.data);
    } catch (e) {
      // LOG KHI C√ì L·ªñI v√† N√âM L·ªñI RA L·∫†I
      _logError('checkPaymentStatusApi', e);
      rethrow;
    }
  }

  /// Ph∆∞∆°ng th·ª©c l·∫•y l·ªãch s·ª≠ giao d·ªãch c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i.
  static Future<ApiResponse> getPaymentHistoryApi() async {
    const String endpoint = '/api/Payment/paymentHistory';
    print('üöÄ [API REQUEST] Calling $endpoint...');

    try {
      final response = await skipNotiDioInstance.get(endpoint);
      // LOG KHI TH√ÄNH C√îNG
      _logSuccess('getPaymentHistoryApi', response.data);
      return ApiResponse.fromJson(response.data);
    } catch (e) {
      // LOG KHI C√ì L·ªñI v√† N√âM L·ªñI RA L·∫†I
      _logError('getPaymentHistoryApi', e);
      rethrow;
    }
  }

  /// Ph∆∞∆°ng th·ª©c ki·ªÉm tra xem ng∆∞·ªùi d√πng hi·ªán t·∫°i c√≥ g√≥i premium n√†o kh√¥ng.
  static Future<ApiResponse> hasPackageApi() async {
    const String endpoint = '/api/Payment/hasPackage';
    print('üöÄ [API REQUEST] Calling $endpoint...');

    try {
      final response = await skipNotiDioInstance.get(endpoint);
      // LOG KHI TH√ÄNH C√îNG
      _logSuccess('hasPackageApi', response.data);
      return ApiResponse.fromJson(response.data);
    } catch (e) {
      // LOG KHI C√ì L·ªñI v√† N√âM L·ªñI RA L·∫†I
      _logError('hasPackageApi', e);
      rethrow;
    }
  }

  // === H√ÄM HELPER ƒê·ªÇ LOG CHO G·ªåN ===
  static void _logSuccess(String functionName, dynamic data) {
    const encoder = JsonEncoder.withIndent('  ');
    final prettyResponse = encoder.convert(data);
    print('‚úÖ [API SUCCESS] in $functionName:\n$prettyResponse');
  }

  static void _logError(String functionName, Object e) {
    print('‚ùå [API ERROR] in $functionName: $e');
    if (e is DioException) {
      print('    Error Type: ${e.type}');
      print('    Error Response: ${e.response?.data}');
    }
  }
}